' {$STAMP BS2pe, VM_iridium.bpe, VM_hum.bpe, VM_adc.bpe, VM_messages.bpe}
' PORT COM6
' {$PBASIC 2.5}

' -------------------------------------------------------------------------
' Modified by Andres Mora
' Thu, October 4th, 2007

' -------------------------------------------------------------------------
' I/O Definitions
' -------------------------------------------------------------------------

Hum_clk        PIN     0                       ' Humidity Clock
Hum_Pwr        PIN     1                       ' Humidity Power
Hum_data       PIN     2                       ' Humidity Data
SO2_Pwr        PIN     3                       ' Voltage Relay Control (Pump & SO2 Sensor)
Free           PIN     4                       ' Free
Modem_Pwr      PIN     5                       ' Modem Power
Modem_RX       PIN     6                       ' Modem Read
Modem_Tx       PIN     7                       ' Modem Write
RTC_Clk        PIN     8                       ' 1302 RTC Clock
RTC_Data       PIN     9                       ' 1302 RTC Data
RTC_Reset      PIN    10                       ' 1302 RTC Reset
AD_Din         PIN    11                       ' 1270 data out of the ADC, in to the Stamp
AD_Dout        PIN    12                       ' 1270 data in to the Stamp, out of the ADC
AD_CS          PIN    13                       ' 1270 "chip select" pin
AD_Clk         PIN    14                       ' 1270 clock pin
LCD_Pin        PIN    15                       ' LCD Connection

' -------------------------------------------------------------------------
' Constants
' -------------------------------------------------------------------------
ShtTemp CON %00011                             ' read temperature
ShtHumi CON %00101                             ' read humidity
ShtStatW CON %00110                            ' status register write
ShtStatR CON %00111                            ' status register read
ShtReset CON %11110                            ' soft reset

' 1-Wire Support
'
OW_FERst        CON     %0001                   ' Front-End Reset
OW_BERst        CON     %0010                   ' Back-End Reset
OW_BitMode      CON     %0100
OW_HighSpd      CON     %1000

ReadROM         CON     $33                     ' read ID, serial num, CRC
MatchROM        CON     $55                     ' look for specific device
SkipROM         CON     $CC                     ' skip rom (one device)
SearchROM       CON     $F0                     ' search


'Humidity constants

Ack CON 0
NoAck CON 1
No CON 0
Yes CON 1

' LCD constants and commands
lcdClear           CON           12              ' Form Feed, Clear and Home
lcdNone            CON           22              ' No Cursor
lcdBlock           CON           25              ' Cursor on and blink character
lcdLine            CON           24              ' Cursor on and no blink character
lcdLine1           CON           128             ' sets cursor to start of line 1
lcdLine2           CON           148             ' sets cursor to start of line 2
lcdLine3           CON           168             ' sets cursor to start of line 3
lcdLine4           CON           188             ' sets cursor to start of line 4
DegSym             CON           176

' BaudRate

#IF ($STAMP < BS2P) #THEN
  #ERROR "This program requires BS2p, BS2pe, or BS2px"
#ENDIF

#SELECT $stamp
  #CASE BS2E, BS2PE
    lcdBaudRate        CON           32          ' LCD, 19200 Baud, 8-bit, No-parity, True
    ModemBaudRate      CON           16416       ' Iridium, 19200 baud, 8 bit, no parity, inverted
    'SO2SensRate      CON           0           ' Depth 4800, Sensor, 8 bits, no parity, 1 stop, True
  #CASE BS2SX, BS2P
    lcdBaudRate        CON           110         ' LCD, 19200 Baud, 8-bit, No-parity, True
    ModemBaudRate      CON           16494       ' Iridium, 19200 baud, 8 bit, no parity, inverted
    'SO2SensRate      CON           0           ' Depth 4800, Sensor, 8 bits, no parity, 1 stop, true
  #CASE BS2PX
    lcdBaudRate        CON           188         ' LCD, 19200 Baud, 8-bit, No-parity, True
    ModemBaudRate      CON           16572       ' Iridium, 19200 baud, 8 bit, no parity, inverted
    'SO2SensRate      CON           17197       ' Depth 4800, Sensor, 8 bits, no parity, 1 stop, true
#ENDSELECT


'Do we need this???

'#DEFINE System = 1 'Change to 2 if using System 2

'#IF System = 1 #THEN
'Temp1          DATA     $28, $D2, $B8, $E5, $00, $00, $00, $0D
'Temp2          DATA     $28, $52, $CD, $E5, $00, $00, $00, $58
'Temp3          DATA     $28, $57, $06, $E6, $00, $00, $00, $69
'Temp4          DATA     $28, $56, $CA, $E5, $00, $00, $00, $D5
'Temp5          DATA     $28, $92, $78, $E5, $00, $00, $00, $5A
'Temp6          DATA     $28, $A1, $B9, $E5, $00, $00, $00, $01
'TempB          DATA     $22, $31, $62, $14, $00, $00, $00, $EB
'TempA          DATA     $22, $9B, $A1, $09, $00, $00, $00, $B1
'#ENDIF

'#IF System = 2 #THEN
'Temp1          DATA     $28, $DE, $04, $E6, $00, $00, $00, $96
'Temp2          DATA     $28, $62, $EE, $E5, $00, $00, $00, $03
'Temp3          DATA     $28, $5C, $FC, $E5, $00, $00, $00, $02
'Temp4          DATA     $28, $3E, $75, $E5, $00, $00, $00, $97
'Temp5          DATA     $28, $20, $D9, $E5, $00, $00, $00, $CD
'Temp6          DATA     $28, $56, $7A, $E5, $00, $00, $00, $9A
'Temp7          DATA     $22, $DC, $45, $14, $00, $00, $00, $21
'Temp8          DATA     $22, $F7, $65, $14, $00, $00, $00, $97
'#ENDIF

' -----[ Temporary Variable Space ]-------------------------------------------
'
Byte_1          VAR     Byte      ' General Purpose Data (Byte)
Byte_2          VAR     Byte      ' General Purpose Data (Byte)
Byte_3          VAR     Byte      ' General Purpose Data (Byte)
Word_1          VAR     Word      ' General Purpose Data (Word)
Word_2          VAR     Word      ' General Purpose Data (Word)

' -------------------------------------------------------------------------
' Variables
' -------------------------------------------------------------------------



' Humidity
ioByte    VAR   Byte_1                             ' data from/to SHT11
ackBit    VAR   Bit                                ' ack/nak from/to SHT11
toDelay   VAR   Byte_2                             ' timeout delay timer
timeOut   VAR   Bit                                ' timeout status
soT       VAR   Word_1                             ' temp counts from SHT11
tC        VAR   Word_2                             ' temp - Celcius
tF        VAR   Word                               ' temp - Fahrenheit
soRH      VAR   Word                               ' humidity counts
rhLin     VAR   Word                               ' humidity; linearized
rhTrue    VAR   Word                               ' humidity; compensated
status    VAR   Byte                               ' status byte


' Time
Seconds    VAR Byte_1
Minutes    VAR Byte_2
Hours      VAR Byte_3
Date       VAR Byte
Month      VAR Byte
Year       VAR Byte


Current_Record  VAR     Byte_2                  ' Pointer in Memory to current reading
Record_Index    VAR     Word                    ' Memory Index
Record_Length   CON     26                      ' Number of Bytes to store 1 reading
i               VAR     Byte                    ' Generic Index
counter       VAR     Nib                       ' Place holder for returning after VM_hum
t             VAR     Nib                       ' time to wait between readings in miliseconds

Address            VAR           Byte_1          ' Address in RAM Pack to write or read from
DataWord           VAR           Word_1          ' Used to hold data to be sent or received
ErrorCount         VAR           Byte_2          ' Number of connection attempts


' -----[ ADC Constants ]-------------------------------------------------------

CH0            CON     0                       ' analog channels
CH1            CON     1

AdcUP5          CON     0                       ' unipolar, 0 - 5 v
AdcBP5          CON     1                       ' bipolar, +/- 5 v
AdcUP10         CON     2                       ' unipolar, 0 - 10 v
AdcBP10         CON     3                       ' bipolar, +/- 10 v
Adc420          CON     4                       ' 4-20 mA input


' -----[ ADC Variables ]-------------------------------------------------------


chan            VAR     Nib                     ' ADC channel (0 - 7)
mode            VAR     Nib                     ' ADC mode (0 - 4)
config          VAR     Byte                    ' configuration byte
adcRes          VAR     Nib                     ' ADC bits (1 - 12)
adcRaw          VAR     Word_1                  ' ADC result (raw)
mVolts          VAR     Word_2                  ' ADC in millivolts



' -----[ EEPROM Data ]-----------------------------------------------------


AdcCfg          DATA    %10000000, %10010000, %10100000, %10110000, %11000000, %11010000, %11100000, %11110000 ' 0-5



' -------------------------------------------------------------------------
' Intialization
' -------------------------------------------------------------------------

IF counter = 2 THEN GOTO Main_2
counter = 1
Init:
STORE 1                                                     ' Set to Store in Program 1
SEROUT LCD_Pin, lcdBaudRate, [lcdClear] : PAUSE 200         ' Clear Screen
SEROUT LCD_Pin, lcdBaudRate, [lcdNone, lcdLine2, "     SO2 Sensor"]
SEROUT LCD_Pin, lcdBaudRate, [lcdNone, lcdLine3, "       Andres"]
PAUSE 3000                                                  ' Wait for Display
SEROUT LCD_Pin, lcdBaudRate, [lcdClear] : PAUSE 12          ' Clear LCD Screen

DEBUG "### "
GOSUB Get_Time                                     ' Get Current time
GOSUB Store_Time                                   'Store Current time
GOSUB Print_Time                                   ' Display Current time
PAUSE 3000
t = 10000
DEBUG "t =", t, CR                                 ' Set time between readings
PAUSE 2000                                         ' Give time to power up


' -------------------------------------------------------------------------
' Program Code
' -------------------------------------------------------------------------


'Begin
' Check Minute
' If time for Recording Sensors then do
' Check Hour
' If time to send then do
' Sleep for t sec.
'Loop to Begin

Main:
     STORE 1                                               ' Setup to Store in program space #1
     SEROUT LCD_Pin, lcdBaudRate, [lcdClear]  : PAUSE 12
     SEROUT LCD_Pin, lcdBaudRate, 5, [lcdNone, lcdLine4, "Awake"]          ' Display status on LCD
     GOSUB Get_Time
     GOSUB Store_Time                                      ' Get Current time
     GOSUB Print_Time                                      ' Display Current time

     PAUSE 5000                                            ' Give time to power up
     HIGH  SO2_Pwr                                         ' Turn ON the pump and the SO2 Sensor
     HIGH  Hum_Pwr                                         ' Turn ON the Humidity sensor

        IF t = 10000 THEN Current_Record = Current_Record + 1        ' Start burst counter Update Current Record Index
        'Record_Index = Current_Record * Record_Length       ' Update Current Record Memory Index
        DEBUG "Current_Record = ", Current_Record, CR
        DEBUG "Record_Index = ", Record_Index, CR

            IF Current_Record >= 10 THEN t=10000           ' reset t
            DEBUG "t reset? =", t, CR
            IF Current_Record >= 10 THEN Current_Record = 0  'reset Current_Record
        SEROUT LCD_Pin, lcdBaudRate, 5, [lcdLine4, "St#", DEC2 Current_Record]          ' Display status on LCD
        PAUSE 10000
        DEBUG "Going to HUM", CR
          RUN 2                                            ' Run Humidity, Adc, Iridium Routines

Main_2:
  DEBUG "Got inside Main_2!", CR
  LOW   SO2_Pwr                                            ' Turn OFF the pump and the SO2 Sensor
  LOW   Hum_Pwr                                            ' Turn OFF the Humidity Sensor

    SEROUT LCD_Pin, lcdBaudRate, 5, [lcdNone, lcdLine4, "Sleep"]   ' Display status on LCD
        FOR i = 0 TO 15 : INPUT i : NEXT                 ' Make all pins inputs to lower power
        SLEEP t                                            ' Sleep for time t (dependent on mode, Regular or Burst)

GOTO Main

' -------------------------------------------------------------------------
' Subroutines
' -------------------------------------------------------------------------
Get_Time:
  HIGH RTC_Reset
  SHIFTOUT RTC_Data, RTC_Clk, LSBFIRST, [%1\1,%11111\5,%10\2]
  SHIFTIN  RTC_Data, RTC_Clk, LSBPRE, [Seconds,Minutes,Hours,Date,Month,Year,Year]
  Seconds = 10 * Seconds.HIGHNIB + Seconds.LOWNIB
  Minutes = 10 * Minutes.HIGHNIB + Minutes.LOWNIB
  Hours   = 10 * Hours.HIGHNIB   + Hours.LOWNIB
  Date    = 10 * Date.HIGHNIB    + Date.LOWNIB
  Month   = 10 * Month.HIGHNIB   + Month.LOWNIB
  Year    = 10 * Year.HIGHNIB    + Year.LOWNIB
  LOW RTC_Reset
RETURN

Store_Time:
  WRITE Record_Index + 0, Hours
  WRITE Record_Index + 1, Minutes
  WRITE Record_Index + 2, Month
  WRITE Record_Index + 3, Date
RETURN

Print_Time:
  DEBUG "T", DEC2 Hours,":", DEC2 Minutes, ":", DEC2 Seconds,
        " D", DEC2 Month, "/", DEC2 Date, "/", DEC2 Year, " ", CR
  SEROUT LCD_Pin, lcdBaudRate, [lcdLine1, "T", DEC2 Hours,":", DEC2 Minutes, ":", DEC2 Seconds,
                                          "  D", DEC2 Month, "/", DEC2 Date, "/", DEC2 Year ]
RETURN